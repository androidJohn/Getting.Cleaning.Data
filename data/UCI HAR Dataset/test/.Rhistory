education <- read.csv("./data/educational.csv")
names(GDP)
names(education)
str(GDP)
head(GDP)
head(GDP)
GDP
GDP
head(GDP)
head(GDP, n = 10)
head(GDP, n = 20)
?is.null
GDP[!is.null, c(1,2)]
GDP[!is.null(GDP[,1]), c(1,2)]
gdp <- GDP[!is.null(GDP[,1]), c(1,2)]
gpd
gdp
rm(gdp)
head(GDP, n = 20)
gdp <- GDP[5:195, c("X", "Ranking")]
gdp <- GDP[5:195, c(1,2)]
gdp
names(education)
education$Short.Name
names(education)
education$CounryCode
education$CountryCode
testing <- merge(GDP, education, by.x = "X", by.y = "CountryCode")
testing
testing <- merge(GDP, education, by.x = "X", by.y = "CountryCode", all = FALSE)
names(testing)
gdp
colnames(gdp) <- c("CountryCode", "Ranking")
head(gdp)
rm(testing)
intersect(names(education), names(gdp))
murge <- merge(gdp, eduction, all = TRUE)
murge <- merge(gdp, education, all = TRUE)
names(murge)
murge[,c(1,2)]
murge <- merge(gdp, education, all = FALSE)
murge[,c(1,2)]
gdp[191,]
gdp[191,] <- NULL
gdp[191,] <- c(NULL,NULL)
gdp[191, c(1,2)] <- NULL
gdp[191, c(1,2)]
?sort
sort(murge, decreasing = TRUE)
sort(murge$Ranking, decreasing = TRUE)
?order
gdp
murge
head(murge)
names(education)
head(education[,6])
head(education[,6], 20)
names(murge)
sort(murge$Ranking, decreasing = TRUE)
murge[, sort(murge$Ranking)]
murge[sort(murge$Ranking),]
murge[sort(murge$Ranking, decreasing = TRUE), c(Ranking, Short.Name)]
murge[sort(murge$Ranking, decreasing = TRUE), c("Ranking", "Short.Name")]
rank13 <- murge[sort(murge$Ranking, decreasing = TRUE), c("Ranking", "Short.Name")]
rank13[13,]
rank13["Short.Name" == "Spain",]
rank13["Short.Name" == "St. Kitts and Nevis",]
rank13
?arrange
arrange(murge, Ranking)
rank13 <- arrange(murge, Ranking)
rank13[13, c("Ranking", "Short.Name")]
rank13[10:20, c("Ranking", "Short.Name")]
rm(gdp)
rm(murge)
rm(rank13)
names(GDP)
gdpData <- names[, c("Gross.domestic.product.2012", "X")]
head(GDP)
GDP[, "Gross.domestic.product.2012"]
GDP[5:194, c("Gross.domestic.product.2012", "X")]
gdpData <- GDP[5:194, c("Gross.domestic.product.2012", "X")]
colnames(gdpData) <- c("Ranking", "CountryCode")
gdpData
names(education)
eductiona[, "Income.Group"]
education[, "Income.Group"]
table(education)
table(education[, "Income.Group"])
GDP <- read.csv("./data/gdp.csv", skip = 4)
gdpData <- GDP[1:190,]
gpdData <- gdpData[, c(1,2,4,5)]
rm(gdpData)
gdpData <- gpdData
rm(gpdData)
colnames(gdpData) <- c("countryCode", "Rank", "Country", "totalDollar")
head(gdpData, n = 10)
str(gdpData)
GDP <- read.csv("./data/gdp.csv", skip = 4, StringsAsFactors = FALSE)
?read.csv
GDP <- read.csv("./data/gdp.csv", skip = 4, stringsAsFactors = FALSE)
gdpData <- GDP[1:190,]
gdpData <- gdpData[, c(1,2,4,5)]
colnames(gdpData) <- c("countryCode", "Rank", "Country", "totalDollar")
head(gdpData)
str(gdpData)
names(education)
intersect(names(gdpData), names(education))
names(gdpData)
mergeData <- merge(gdpData, education, by.x = "countryCode", by.y = "CountryCode", all = TRUE, suffixes = c(".gdp", ".edu"))
rank13 <- arrange(mergeData, desc(Rank))
rank13[13, "Short.Name"]
rank13
rank13[, c("Rank", "Short.Name")]
rank13 <- arrange(mergeData, desc(as.numeric(Rank))
)
rank13[13, "Short.Name"]
mergeData <- merge(gdpData, education, by.x = "countryCode", by.y = "CountryCode", all = FALSE, suffixes = c(".gdp", ".edu"))
rank13 <- arrange(mergeData, desc(as.numeric(Rank))
)
rank13[13, "Short.Name"]
str(mergeData)
mergeData$Rank <- as.numeric(mergeData$Rank)
str(mergeData)
meanGDPoecd <- aggregate(mergeData$Rank ~ mergeData$Income.Group, FUN = mean)
meanGDPoecd
mergeData2 <- mutate(mergeData, GDPgroups = cut2(Rank, g = 5))
table(mergeData2$GDPgroups, useNA = "ifany")
table(mergeData2$Income.Group, mergeData2$GDPgroups, useNA = "ifany")
190-38
survey <- read.csv("./data/survey.csv", stringsAsFactors = FALSE)
head(survey)
str(survey)
survey["ACR" == 3 & "AGS"== 6,]
agricultureLogical <- vector(survey["ACR" == 3 & "AGS" == 6,]
)
agricultureLogical <- as.vector(survey["ACR" == 3 & "AGS" == 6,])
survey[survey$ACR == 3,]
survey[survey$ACR == 3 & survey$AGS ==6,]
names(survey)
survey[survey$ACR == 3 & survey$AGS ==6, "SERIALNO"]
survey[(survey$ACR == 3 & survey$AGS ==6),]
agricultureLogical <- survey[any(survey$ACR == 3 & survey$AGS == 6),]
head(agricultureLogical)
agricultureLogical <- survey[all(survey$ACR == 3 & survey$AGS == 6),]
?any
agricultureLogical <- any((survey$ACR == 3 $ survey$AGS == 6))
agricultureLogical <- any((survey$ACR == 3 & survey$AGS == 6))
head(survey[which(agricultureLogical),], n = 3)
head(survey[which(agricultureLogical), "RT"], n = 3)
head(survey[which(agricultureLogical), "SERIALNO"], n = 3)
survey[which(agricultureLogical), "SERIALNO"]
head(agricultureLogical)
agricultureLogical <- all((survey$ACR == 3 & survey$AGS == 6))
agricultureLogical <- which((survey$ACR == 3 & survey$AGS == 6))
agricultureLogical <- ifelse((survey$ACR==3 & survey$AGS==6), TRUE, FALSE)
?which
?ifelse
survey[which(agricultureLogical),]
survey[which(agricultureLogical), "SERIALNO"]
survey[which(agricultureLogical), ]
head(survey[which(agricultureLogical), ], n = 3)
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
savehistory("~/datasciencecoursera/gettingCleaningData.Rhistory")
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
?dist
dist(dataFrame)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
par(mar = c(4, 4, 4, 0))
plot(hClustering)
source('~/datasciencecoursera/myplclust.R')
myplclust(hClustering, lab = rep(1:3, each = 4, lab.col = rep(1:3, each = 4)))
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4)))
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each = 4))
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
heatmap(dataMatrix)
dataFrame <- data.frame(x = x, y = log(y))
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
heatmap(dataMatrix)
dataFrame <- data.frame(x = x, y = y)
set.seed(1234)
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
kmeansObj$cluster
kmeansObj$centers
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
kmeansObj2 <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1, 2), mar = c(2, 4, 0.1, 0.1))
image(t(dataMatrix)[, nrow(dataMatrix):1], yaxt = "n")
image(t(dataMatrix)[, order(kmeansObj$cluster)], yaxt = "n")
?t
?matrix
m <- matrix(c(LETTERS[1:8], 1:8), 4, 2)
M
m
m <- matrix(c(LETTERS[1:4], 1:4), 4, 2)
m
t(m)
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 400)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
?image
class(t(dataMatrix)[, nrow(dataMatrix):1])
z <- as.matrix(t(dataMatrix)[, nrow(dataMatrix):1])
image(1:10, 1:40, z)
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
heatmap(dataMatrix)
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
coinFlip
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
heatmap(dataMatrix)
hh <- hclust(dist(dataMatrix))
?dist
dataMatrixOrdered <- dataMatrix[hh$order, ]
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, , xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
image(dataMatrixOrdered[1:nrow(dataMatrixOrdered),])
?scale
?svd
svd1 <- svd(scale(dataMatrixOrdered))
svd1
names(svd1)
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[, 1], 40:1, , xlab = "Row", ylab = "First left singular vector", pch = 19)
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular vecor", pch = 19)
?plot
par(mfrow = c(1, 2))
plot(svd1$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
?prcomp
pca1 <- prcomp(dataMatrixOrdered, scale = TRUE)
pca1
plot(pca1$rotation[, 1], svd1$v[, 1], pch = 19, xlab = "Principal Component 1", ylab = "Right Singular Vector 1")
abline(c(0, 1))
par(mfrow = c(1, 1))
plot(pca1$rotation[, 1], svd1$v[, 1], pch = 19, xlab = "Principal Component 1", ylab = "Right Singular Vector 1")
abline(c(0, 1))
par("mfrow")
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[, 1], 40:1, , xlab = "Row", ylab = "First left singular vecotr", pch = 19)
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular vector", pch = 19)
par(mfrow = c(1, 2))
plot(svd1$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
constantMatrix <- dataMatrixOrdered*0
for(i in 1:dim(dataMatrixOrdered)[1]){contantMatrix[i,] <- rep(c(0, 1), each = 5)}
for(i in 1:dim(dataMatrixOrdered)[1]){constantMatrix[i,] <- rep(c(0, 1), each = 5)}
svd1 <- svd(contantMatrix)
svd1 <- svd(constantMatrix)
par(mfrow=c(1,3))
image(t(constantMatrix)[, nrow(constantMatrix):1])
plot(svd1$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch =19)
set.seed(678910)
for (i in 1:40) {}
for (i in 1:40) {
coinFlip1 <- rbinom(1, size = 1, prob = 0.5)
coinFlip2 <- rbinom(1, size = 1, prob = 0.5)
if (coinFlip1) {
dataMatrix[i, ] <- dataMatri[i, ] + rep(c(0,5), each = 5)
}
if (coinFlip2) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 5), 5)
}
}
for (i in 1:40) {
coinFlip1 <- rbinom(1, size = 1, prob = 0.5)
coinFlip2 <- rbinom(1, size = 1, prob = 0.5)
if (coinFlip1) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 5), 5)
}
if (coinFlip2) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 5), 5)
}
}
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
svd2 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rep(c(0, 1), 5), pch = 19, xlab = "Column", ylab = "Pattern1")
plot(rep(c(0, 1), each = 5), pch = 19, xlab = "Column", ylab = "Pattern2")
svd2 <- svd(scale(dataMatrixOrdered))
test <- prcom(scale(dataMatrixOrdered))
test <- prcomp(scale(dataMatrixOrdered))
test
svd2
rm(test)
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd2$v[, 1], pch = 19, xlab = "Column", ylab = "First right singular vector")
plot(svd2$v[, 2], pch = 19, xlab = "Column", ylab = "Second right singular vector")
svd1 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1, 2))
plot(svd1$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Percent of variance explained", pch = 19)
?structure
setwd("./Getting.Cleaning.Data/data")
setwd("../")
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
if(!file.exists("./temp")){dir.create("./temp")}
download.file(fileUrl, destfile = "./temp/data.zip", method = "curl")
temp <- tempfile()
download.file(fileUrl, temp, method = "curl")
?unz
data <- read.table(unz(temp, "./data/fit.csv"))
data <- read.table(unz(temp, "fit.csv"))
data <- read.table(unz(temp, "Dataset.csv"))
data <- read.table(unz(temp, "Dataset.dat"))
fitData <- read.table(unz(temp, "getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.dat"))
fitData <- read.table(unz(temp, "getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset"))
fitData <- read.table(unz(temp, "Dataset"))
temp
fitData <- read.table(unz(temp, "fileb507c9cc604"))
temp[,1]
temp[1]
temp[1][3]
temp
temp <- tempfile()
download.file(fileUrl, temp, method = "curl")
fitData <- read.table(unz(temp, "Dataset.dat"))
unlink(temp)
?unzip
download.file(fileUrl, destfile = "./data/dataset.zip", method = "curl")
download.file(fileUrl, destfile = "./data/dataset.zip", method = "curl")
unzip("./data/dataset.zip", overwrite = TRUE)
unzip("./data/dataset.zip")
unzip("./data/dataset.zip", exdir = "./data/")
getwd()
dataDir <- "/home/john/datasciencecoursera/Getting.Cleaning.Data/data/'UCI HAR Dataset'/"
setwd(dataDir)
x <- read.table(paste(dataDir, "test/X_test.txt", sep = "/"))
x <- read.table(paste(dataDir, "test/X_test.txt", sep = ""))
setwd("./data/UCI HAR Dataset/test")
dataDir
dataDir <- "/home/john/datasciencecoursera/Getting.Cleaning.Data/data/UCI HAR Dataset/"
x <- read.table(paste(dataDir, "test/X_test.txt", sep = ""))
names(x)
x[,1]
rm(x)
rm(temp)
xTest <- read.table(paste(dataDir, "test/X_test.txt", sep = ""))
dataDir
dataDirTest <-  "/home/john/datasciencecoursera/Getting.Cleaning.Data/data/UCI HAR Dataset/test/"
dataDirTrain <-  "/home/john/datasciencecoursera/Getting.Cleaning.Data/data/UCI HAR Dataset/train/"
rm(dataDir)
xTestDat <- read.table(paste(dataDirTest, "X_test.txt", sep = ""))
rm(xTest)
yTestlabels <- read.table(paset(dataDirTest, "y_test.txt", sep = ""))
yTestlabels <- read.table(paste(dataDirTest, "y_test.txt", sep = ""))
xTrainDat <- read.table(paste(dataDirTrain, "X_train.txt", sep = ""))
head(yTestlabels)
yTrainlabels <- read.table(paste(dataDirTrain, "y_train.txt", sep = ""))
dataDir <- "/home/john/datasciencecoursera/Getting.Cleaning.Data/data/UCI HAR Dataset/"
featuresList <- read.table(paste(dataDir, "features.txt", sep = ""))
head(featuresList)
activityLabels <- read.table(paste(dataDir, "activity_labels.txt", sep = ""))
head(activityLabels)
trainSubject <- read.table(paste(dataDirTrain, "subject_train.txt", sep = ""))
inertiaDataDir <- "/home/john/datasciencecoursera/Getting.Cleaning.Data/data/UCI HAR Dataset/train/Inertia Signals/"
head(trainSubject)
trainSubject
head(activityLabels)
activityLabels[, 1] <- NULL
activityLabels
?gsub
activityLabels <- read.table(paste(dataDir, "activity_labels.txt", sep = ""))
head(featuresList)
?lower
?tolower
txt2 <- "useRs may fly into JFK or laGuardia"
gsub("(\\w)(\\w*)(\\w)", "\\U\\1\\E\\2\\U\\3", txt2, perl=TRUE)
sub("(\\w)(\\w*)(\\w)", "\\U\\1\\E\\2\\U\\3", txt2, perl=TRUE)
head(featuresList)
feature <- "tBodyAcc-mean()-X"
txt2 <- "useRs may fly into JFK or laGuardia"
gsub("(\\w)(\\w*)(\\w)", "\\U\\1\\E\\2\\U\\3", txt2, perl=TRUE)
sub("(\\w)(\\w*)(\\w)", "\\U\\1\\E\\2\\U\\3", txt2, perl=TRUE)
sub("(\(\))", "", feature, perl=TRUE)
sub("((\)\)", "", feature, perl=TRUE)
sub("\(\)", "", feature, perl=TRUE)
sub("\/(\/)", "", feature, perl=TRUE)
sub("()", "", feature, perl=TRUE)
sub("(/\()", "", feature, perl=TRUE)
sub("(\()", "", feature, perl=TRUE)
head(featuresList)
sub("(-)", "", feature, perl=TRUE)
sub("(-*)", "", feature, perl=TRUE)
sub("(*-)", "", feature, perl=TRUE)
head(featuresList)
sub("(?-)", "", feature, perl=TRUE)
sub("(-?)", "", feature, perl=TRUE)
head(featuresList)
gsub("(\\w)(\\w*)(\\w)", "\\U\\1\\E\\2\\U\\3", txt2, perl=TRUE)
sub("(\\w)(\\w*)(\\w)", "\\U\\1\\E\\2\\U\\3", txt2, perl=TRUE)
sub("(\\w)(-)(\\w)(\(\)(-)([A-F])", "", perl=TRUE)
sub("(\\w)(-)(\\w)(-)([A-F])", "", perl=TRUE)
sub("(\\w)(-)(\\w)(-)([A-F])", "", feature, perl=TRUE)
sub("\\w[-]\\w[-][A-F]", "", feature, perl=TRUE)
sub("[-]", "", feature, perl=TRUE)
sub("[-][-]", "", feature, perl=TRUE)
sub("[-]\w[-]", "", feature, perl=TRUE)
sub("[-]\\w[-]", "", feature, perl=TRUE)
sub("[-]\\w/(/)[-]", "", feature, perl=TRUE)
sub("/(/)", "", feature, perl=TRUE)
sub("()", "", feature, perl=TRUE)
sub("[^\s][-][a-zA-Z]*[\(][\)][-][a-zA-Z]", "", feature, perl=TRUE)
sub([^\s][-][a-zA-Z]*[\(][\)][-][a-zA-Z], "", feature, perl=TRUE)
sub("[a-zA-Z]*[-][a-zA-Z]*[\(][\)][-][a-zA-Z]", "", feature, perl=TRUE)
sub("([a-zA-Z]*[-][a-zA-Z]*[\(][\)][-][a-zA-Z])", "", feature, perl=TRUE)
sub("([a-zA-Z]*[-][a-zA-Z]*[/(][/)][-][a-zA-Z])", "", feature, perl=TRUE)
sub("([-]*[/(][/)])", "", feature, perl=TRUE)
sub("([/-]*[/(][/)])", "", feature, perl=TRUE)
sub("([/-][/(][/)])", "", feature, perl=TRUE)
sub("(-/(/))", "", feature, perl=TRUE)
sub("([/-][/(][/)])", "", feature, perl=TRUE)
sub("([/-][/(][/)])", "", feature, perl=TRUE)
sub("([/-]*[/(][/)])", "", feature, perl=TRUE)
sub("([/-][/(][/)][-])", "", feature, perl=TRUE)
sub("([/-])([/(][/)])([-])", "", feature, perl=TRUE)
sub("([/-]*[/(][/)])", "", feature, perl=TRUE)
sub("([/(][/)])", "", feature, perl=TRUE)
sub("(-)", "", feature, perl=TRUE)
sub("(-)(/()(/))", "", feature, perl=TRUE)
sub("(-)([/(])([/)])", "", feature, perl=TRUE)
sub("(-)[:aplha:]*([/(])([/)])(-)[:alpha:]", "", feature, perl=TRUE)
head(featuresList)
sub("-", "", feature, perl=FALSE)
sub("-"'-', "", feature, perl=FALSE)
sub("-""-", "", feature, perl=FALSE)
sub("(-)(-)", "", feature, perl=FALSE)
sub("(-)", "", feature, perl=FALSE)
sub("(-[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYS]*\(\))", "", feature, perl=FALSE)
sub("(-[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYS]*/(/))", "", feature, perl=FALSE)
sub("([-][abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYS]*/(/))", "", feature, perl=FALSE)
sub("([-]/(/))", "", feature, perl=FALSE)
sub("[tBodyAcc][-][mean][/(][/)]", "", feature, perl=FALSE)
sub("\tBodyAcc\[-][mean][/(][/)]", "", feature, perl=FALSE)
sub("\tBodyAcc\/[-][mean][/(][/)]", "", feature, perl=FALSE)
grep("[a-z]", letters)
gsub("([ab])", "\\1_\\1_", "abc and ABC")
gsub("([ab])", "", "abc and ABC" )
gsub("([ab])", "\\2_\\2_", "abc and ABC")
gsub("([-/(/)])", "", feature)
tolower(gsub("([-/(/)])", "", feature))
head(featuresList)
featuresList[, 2] <- featuresList$V2[tolower(gsub("([-/(/)])", "", feature))]
head(featuresList)
featuresList <- read.table(paste(dataDir, "features.txt", sep = ""))
featuresList[, 2] <- featuresList[tolower(gsub("([-/(/)])", "", feature)), 2]
head(featuresList)
featuresList <- read.table(paste(dataDir, "features.txt", sep = ""))
str(featuresList)
str(featuresList)
levels(featuresList)
levels(featuresList[,2])
featuresList <- read.table(paste(dataDir, "features.txt", sep = "", stringsAsFactors = FALSE))
featuresList <- read.table(paste(dataDir, "features.txt", sep = ""), stringsAsFactors = FALSE)
str(featureList)
str(featuresList)
featuresList[, 2] <- featuresList[tolower(gsub("([-/(/)])", "", feature)), 2]
head(featuresList)
featuresList <- read.table(paste(dataDir, "features.txt", sep = ""), stringsAsFactors = FALSE)
for (i in 1:nrow(featuresList)) {featuresList[tolower(gsub("([-/(/)])", "", feature)), 2]
for (i in 1:nrow(featuresList)) {
featuresList[i, 2] <- tolower(gsub("([-/(/)])", "", featuresList[i, 2]))
}
head(featuresList)
head(featuresList, n = 50)
for (i in 1:nrow(featuresList)) {
featuresList[i, 2] <- tolower(gsub("([-/(/)/,])", "", featuresList[i, 2]))
}
head(featuresList, n = 50)
save.image("~/datasciencecoursera/Getting.Cleaning.Data/data/UCI HAR Dataset/test/courseProject.RData")
