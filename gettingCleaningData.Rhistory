?browser
browser(makeCacheMatrix)
source('~/datasciencecoursera/cacheSolve.R')
source('~/datasciencecoursera/makeCacheMatrix.R')
browser(makeCacheMatrix)
n
browser(cacheSolve)
cacheSolve
matrix <- NULL
setMatrix <- function(y) {
x <<- y
matrix <<- NULL
}
getMatrix <- function() x
setMatrixInverse <- function(x) {
matrix <<- solve(x)
}
source('~/.active-rstudio-document')
x <- makeCacheMatrix(x = matrix(c(2,0,0,5),nrow=2,ncol=2))
source('~/datasciencecoursera/cacheSolve.R')
cacheSolve(x)
?print
?frames
?frame
source('~/datasciencecoursera/makeCacheMatrix.R')
source('~/datasciencecoursera/cacheSolve.R')
x <- makeCacheMatrix(x = matrix(c(2,0,0,5),nrow=2,ncol=2))
cacheSolve(x)
cacheSolve(x)
x <- makeCacheMatrix(x = matrix(c(2,0,0,5),nrow=2,ncol=2))
cacheSolve(x)
source('~/datasciencecoursera/cacheSolve.R')
source('~/datasciencecoursera/makeCacheMatrix.R')
source('~/datasciencecoursera/cacheSolve.R')
x <- makeCacheMatrix(x = matrix(c(2,0,0,5),nrow=2,ncol=2))
cacheSolve(x)
cacheSolve(x)
?assign
source('~/datasciencecoursera/makeCacheMatrix.R')
source('~/datasciencecoursera/cacheSolve.R')
x <- makeCacheMatrix(x = matrix(c(2,0,0,5),nrow=2,ncol=2))
cacheSolve(x)
source('~/datasciencecoursera/makeCacheMatrix.R')
source('~/datasciencecoursera/cacheSolve.R')
x <- makeCacheMatrix(x = matrix(c(2,0,0,5),nrow=2,ncol=2))
cacheSolve(x)
source('~/datasciencecoursera/makeCacheMatrix.R')
source('~/datasciencecoursera/cacheSolve.R')
x <- makeCacheMatrix(x = matrix(c(2,0,0,5),nrow=2,ncol=2))
cacheSolve(x)
cacheSolve(x)
source('~/datasciencecoursera/makeCacheMatrix.R')
source('~/datasciencecoursera/cacheSolve.R')
x <- makeCacheMatrix(x = matrix(c(2,0,0,5),nrow=2,ncol=2))
cacheSolve(x)
?vector
?mean
source('~/datasciencecoursera/cacheSolve.R')
source('~/datasciencecoursera/makeCacheMatrix.R')
source('~/datasciencecoursera/makeCacheMatrix.R')
source('~/datasciencecoursera/cacheSolve.R')
x <- makeCacheMatrix(x = matrix(c(2,0,0,5),nrow=2,ncol=2))
cacheSolve(x)
source('~/datasciencecoursera/makeCacheMatrix.R')
source('~/datasciencecoursera/cacheSolve.R')
x <- makeCacheMatrix(x = matrix(c(2,0,0,5),nrow=2,ncol=2))
cacheSolve(x)
source('~/datasciencecoursera/makeCacheMatrix.R')
source('~/datasciencecoursera/cacheSolve.R')
x <- makeCacheMatrix(x = matrix(c(2,0,0,5),nrow=2,ncol=2))
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
x <- makeCacheMatrix(x = matrix(rnorm(16), nrow=4 ,ncol= 4))
cacheSolve(x)
cacheSolve(x)
source('~/datasciencecoursera/makeCacheMatrix.R')
source('~/datasciencecoursera/cacheSolve.R')
x <- makeCacheMatrix(x = matrix(rnorm(16), nrow=4 ,ncol= 4))
cacheSolve(x)
cacheSolve(x)
source('~/datasciencecoursera/makeCacheMatrix.R')
source('~/datasciencecoursera/cacheSolve.R')
x <- makeCacheMatrix(x = matrix(rnorm(16), nrow=4 ,ncol= 4))
cacheSolve(x)
cacheSolve(x)
x <- makeCacheMatrix(x = matrix(c(2,0,0,5),nrow=2,ncol=2))
cacheSolve(x)
cacheSolve(x)
setwd("~/ProgrammingAssignment2/")
sys.time(n<-1000)
?system.time
system.time(for (i <- 0, i < 10000, i++) print(i))
?for
()
system.time({for (i <- 0, i < 10000, i++) print(i)})
system.time({for (i <- 0; i < 10000; i++) print(i)})
set.seed(1)
rpois(5, 2)
?set.seed
set.seed(10)
x <- rbinorm(10, 10, 0.5)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
plot(y)
getwd()
setwd("~/datasciencecoursera/")
pf <- read.csv("pseudo_facebook.tsv", sep = '\t')
str(pf)
names(pf)
library(ggplot)
library(ggplot2)
names(pf)
qplot(x = dob_day, data = pf)
qplot(x = dob_day, data = pf) +
scale_x_discrete(breaks=1:31)
?qplot
qplot(x = dob_day, data = pf) +
scale_x_discrete(breaks=1:31)
qplot(x = dob_day, data = pf, colour = runif(10)) +
scale_x_discrete(breaks=1:31)
set.seed(13435)
X <- data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = sample(11:15))
X
?sample
X <- X[sample(1:5),]; X$var2[c(1,3)] = NA
X
X[1:2, "var2"]
X[X$var1 <= 3 & X$var3 > 11]
X[X$var1 <= 3 & X$var3 > 11,]
X[(X$var1 <= 3 | X$var3 > 15),]
library(plyr)
arrange(X, var1)
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/Culture-Arts/Restaurants/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile="./data/restaurants.csv", method="curl")
restData <- read.csv("./data/restaurants.csv")
download.file(fileUrl, destfile="./data/restaurants.csv", method="curl")
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile="./data/restaurants.csv", method="curl")
restData <- read.csv("./data/restaurants.csv")
head(restData, n=3)
head(restData, n=3)
head(restData, n=3)
summary(restData)
str(restData)
quantile(restData$councilDistrict, na.rm = TRUE)
quantile(restData$councilDistrict, probs=c(0.5,.075,0.9), na.rm = TRUE)
quantile(restData$councilDistrict, probs=c(0.5,0.75,0.9), na.rm = TRUE)
table(restData$zipCode, useNA = "ifany")
table(restData$councilDistrict, useNA = "ifany")
table(restData$councilDistrict, restData$zipCode, useNA = "ifany")
sum(is.na(restData$councilDistrict))
an(is.na(restData$councilDistrict))
any(is.na(restData$councilDistrict))
all(restData$zipCode > 0)
colSums(is.na(restData))
all(colSums(is.na(restData))==0)
table(restData$zipCode %in% c("21212"))
table(restData$zipCode %in% c("21212", "21213"))
x <- list(restData$zipCode %in% c("21212", "21213"))
x
y <- restData$zipCode[x,]
y <- restData[x,]
y <- restData[as.vector(x),]
rm(x)
rm(y)
x <- vector(restData$zipCode %in% c("21212", "21213"))
x <- as.vector(restData$zipCode %in% c("21212", "21213"))
restData$zipcode[x]
restData[x,]
rm(x)
data(UCBAdmissions)
DF <- as.data.frame(UCBAdmissions)
summary(DF)
xt <- xtabs(Freq ~ Gender + Admit, data = DF)
xt
warpbreaks$replicate <- rep(1:9, len = 54)
xt <- xtabs(breaks ~., data = warpbreaks)
xt
rm(DF)
rm(warpbreaks)
rm(UCBAdmissions)
rm(xt)
restData$nearMe <- restData$neighborhood %in% c("Roland Park", "Homeland")
table(restData$nearMe)
restData$zipWrong <- ifelse(restData$zipCode < 0, TRUE, FALSE)
table(restData$zipWrong, restData$zipCode < 0)
restData$zipGroups <- cut(restData$zipCode, breaks = quantile(restData$zipCode))
table(restData$zipGroups)
table(restData$zipGroups, restData$zipCode)
library(Hmisc)
restData$zipGroups <- cut2(restData$zipCode, g = 4)
table(restData$zipGroups)
restData$zcf <- factor(restData$zipCode)
levels(restData$zcf)
restData$zcf[1:10]
class(restData$zcf)
yesno <- sample(c("yes", "no"), size = 10, replace = TRUE)
yesnofac <- factor(yesno, levels = c("yes", "no"))
relevel(yesnofac, ref = "yes")
as.numeric(yesnofac)
library(Hmisc); library(plyr)
restData2 <- mutate(restData, zipGroups = cut2(zipCode, g = 4))
table(restData2$zipGroups)
rm(restData2)
rm(yesno)
rm(yesnofac)
data(mtcars)
library(reshape2)
head(mtcars)
mtcars$carname <- rownames(mtcars)
mtcars$carname
carMelt <- melt(mtcars, id = c("carname", "gear", "cyl"), measure.vars = c("mpg", "hp"))
head(carMelt, n = 3)
tail(carMelt, n = 3)
carMelt
cylData <- dcast(carMelt, cyl ~ variable)
cylData
cylData <- dcast(carMelt, cyl ~ variable, mean)
cylData
data(InsectSprays)
head(InsectSprays)
tapply(InsectSprays$count, InsectSprays$spray, sum)
spIns <- split(InsectSprays$count, InsectSprays$spray)
spIns
sprCount = lapply(spIns, sum)
sprCount
tapply(InsectSprays$count, InsectSprays$spray, sum)
sprCount$A
unlist(sprCount)
sapply(spIns, sum)
ddply(InsectSprays, .(spray), summarize, sum = sum(count))
?ddply
ddply(InsectSprays, .(spray), summarize, sum = sum(count))
ddply(InsectSprays, .(spray), summarize, by = sum(count))
ddply(InsectSprays, .(spray), summarize, sum = sum(count))
ddply(InsectSprays, .(spray), summarise, sum = sum(count))
spraySums <- ddply(InsectSprays, .(spray), summarise, sum = ave(count, FUN = sum))
?dim
dim(spraySums)
head(spraySums)
if(!file.exists("./data")){dir.create("./data")}
fileUrl1 <- "https//dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
fileUrl2 <- "https//dl.dropboxusercontent.com/u/7710864/data/solutions-apr29.csv"
download.file(fileUrl1, destfile = "./data/reviews.csv", method = "curl")
fileUrl1 <- "https://dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
fileUrl2 <- "https://dl.dropboxusercontent.com/u/7710864/data/solutions-apr29.csv"
download.file(fileUrl1, destfile = "./data/reviews.csv", method = "curl")
download.file(fileUrl2, destfile = "./data/solutions.csv", method = "curl")
download.file(fileUrl2, destfile = "./data/solutions.csv", method = "curl")
reviews <- read.csv("./data/reviews.csv"); solutions <- read.csv("./data/solutions.csv")
head(reviews, 2)
head(solutions, 2)
mergedData <- merge(reviews, solutions, by.x = "solution_id", by.y = "id", all = TRUE)
head(mergedData)
instersect(names(solutions), names(reviews))
intersect(names(solutions), names(reviews))
mergedData2 = merge(reviews, solutions, all = TRUE)
head(mergedData2)
?as.data.frame
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile = "./data/survey.csv", method = "curl")
survey <- read.csv("./data/survey.csv")
names(survey)
Employee <- data.frame("LastName" = c("Rafferty", "Jones", "Heisenberg", "Robinson", "Smith", "John"), "DepartmentID" = c(31,33,33,34,34,NA))
table(Employee)
Department <- data.frame("DepartmentID" = c(31,33,34,35), "DepartmentName" = c("Sales", "Engineering", "Clerical", "Marketing"))
Department
Employee
agricultureLogical <- survey["ACR" == 3 & "AGS" == 6,]
agricultureLogical
agricultureLogical <- survey[survey$ACR == 3 & survey$AGS == 6,]
survey[which(agricultureLogical)]
agricultureLogical <- survey[survey$ACR == 3 & survey$AGS == 6]
survey[survey$ACR == 3 & survey$AGS == 6]
survey[survey$ACR == 3 & survey$AGS == 6,]
survey$SERIALNO[survey$ACR == 3 & survey$AGS == 6,]
survey$SERIALNO[survey$ACR == 3 & survey$AGS == 6]
survey[any(survey$ACR == 3 & survey$AGS == 6)]
x <- vector(survey$ACR == 3 & survey$AGS == 6)
agriculturLogical <- ifelse(survey$ACR == 3 & survey$AGS == 6, TRUE, FALSE)
survey[which(agricultureLogical),]
?ifelse
?which
survey[which(agriculturLogical),]
head(survey[which(agriculturLogical),])
library(jpeg)
install.packages("jpeg")
install.packages("jpeg")
library(jpeg)
?jpeg
file <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(file, destfile = "./data/jeff.jpg", method = "curl")
quantile(jpeg(filename = "jeff.jpg", native = TRUE), probs = c(.30, .80))
quantile(jpeg(filename = "jeff.jpg"), probs = c(.30, .80), native = TRUE)
jeff <- jpeg(filename = "jeff.jpg")
quantile(jeff, probs = c(.30, .80), native = TRUE)
jpeg(filename = "jeff.jpg")
jpeg(filename = "jeff.jpg", type = "X11")
jpeg(filename = "jeff.jpg", type = "cairo")
jeff <- jpeg(filename = "jeff.jpg", type = "cairo")
jeff
rm(jeff)
quantile(jpeg(filename = "jeff.jpg", type = "cairo"), probs = c(.30, .80), native = TRUE)
jeff <- jpeg(filename = "jeff.jpg", width = 180, height = 180, units = "px", type = c("cairo", "Xlib"), antialias)
jeff <- jpeg(filename = "jeff.jpg", width = 180, height = 180, units = "px", type = "Xlib", antialias)
jeff <- jpeg(filename = "jeff.jpg", width = 180, height = 180, units = "px", type = "Xlib")
?readJPEG
jeff <- readJPEG(file, native = TRUE)
jeff <- readJPEG("jeff.jpg", native = TRUE)
jeff <- readJPEG(system.file("img", "jeff.jpg", package = "jpeg"), native = TRUE)
jeff <- readJPEG(system.file("img", "./data/jeff.jpg", package = "jpeg"), native = TRUE)
?system.file
jeff <- readJPEG(system.file("./data/jeff.jpg", package = "jpeg"), native = TRUE)
jeff <- readJPEG(system.file("jeff.jpg", package = "jpeg"), native = TRUE)
library(jpeg)
jeff <- readJPEG(system.file("jeff.jpg", package = "jpeg"), native = TRUE)
jeff <- readJPEG(system.file("./data/jeff.jpg", package = "jpeg"), native = TRUE)
jeff <- readJPEG(system.file("img", "./data/jeff.jpg", package = "jpeg"), native = TRUE)
?readJPEG
jeff <- readJPEG(system.file("data", "jeff.jpg", package = "jpeg"), native = TRUE)
jeff <- readJPEG(system.file("data", "jeff.jpg", package = "jpeg"), TRUE)
??jpeg
setwd("./data")
jeff <- readJPEG("jeff.jpg", native = TRU)
jeff <- readJPEG("jeff.jpg", native = TRUe)
jeff <- readJPEG("jeff.jpg", native = TRUE)
quantiles(jeff, probs = c(.30, .80))
quantile(jeff, probs = c(.30, .80))
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
rm(fileUrl)
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
setwd("../")
if(!file.exists("./data")){dir.create("./data")}
download.file(fileUrl1, destfile = "./data/gdp.csv", method = "curl")
download.file(fileUrl1, destfile = "./data/gdp.csv", method = "curl")
download.file(fileUrl2, destfile = "./data/educational.csv", method = "curl")
GDP <- read.csv("gdp.csv")
GDP <- read.csv("./data/gdp.csv")
education <- read.csv("./data/educational.csv")
names(GDP)
names(education)
str(GDP)
head(GDP)
head(GDP)
GDP
GDP
head(GDP)
head(GDP, n = 10)
head(GDP, n = 20)
?is.null
GDP[!is.null, c(1,2)]
GDP[!is.null(GDP[,1]), c(1,2)]
gdp <- GDP[!is.null(GDP[,1]), c(1,2)]
gpd
gdp
rm(gdp)
head(GDP, n = 20)
gdp <- GDP[5:195, c("X", "Ranking")]
gdp <- GDP[5:195, c(1,2)]
gdp
names(education)
education$Short.Name
names(education)
education$CounryCode
education$CountryCode
testing <- merge(GDP, education, by.x = "X", by.y = "CountryCode")
testing
testing <- merge(GDP, education, by.x = "X", by.y = "CountryCode", all = FALSE)
names(testing)
gdp
colnames(gdp) <- c("CountryCode", "Ranking")
head(gdp)
rm(testing)
intersect(names(education), names(gdp))
murge <- merge(gdp, eduction, all = TRUE)
murge <- merge(gdp, education, all = TRUE)
names(murge)
murge[,c(1,2)]
murge <- merge(gdp, education, all = FALSE)
murge[,c(1,2)]
gdp[191,]
gdp[191,] <- NULL
gdp[191,] <- c(NULL,NULL)
gdp[191, c(1,2)] <- NULL
gdp[191, c(1,2)]
?sort
sort(murge, decreasing = TRUE)
sort(murge$Ranking, decreasing = TRUE)
?order
gdp
murge
head(murge)
names(education)
head(education[,6])
head(education[,6], 20)
names(murge)
sort(murge$Ranking, decreasing = TRUE)
murge[, sort(murge$Ranking)]
murge[sort(murge$Ranking),]
murge[sort(murge$Ranking, decreasing = TRUE), c(Ranking, Short.Name)]
murge[sort(murge$Ranking, decreasing = TRUE), c("Ranking", "Short.Name")]
rank13 <- murge[sort(murge$Ranking, decreasing = TRUE), c("Ranking", "Short.Name")]
rank13[13,]
rank13["Short.Name" == "Spain",]
rank13["Short.Name" == "St. Kitts and Nevis",]
rank13
?arrange
arrange(murge, Ranking)
rank13 <- arrange(murge, Ranking)
rank13[13, c("Ranking", "Short.Name")]
rank13[10:20, c("Ranking", "Short.Name")]
rm(gdp)
rm(murge)
rm(rank13)
names(GDP)
gdpData <- names[, c("Gross.domestic.product.2012", "X")]
head(GDP)
GDP[, "Gross.domestic.product.2012"]
GDP[5:194, c("Gross.domestic.product.2012", "X")]
gdpData <- GDP[5:194, c("Gross.domestic.product.2012", "X")]
colnames(gdpData) <- c("Ranking", "CountryCode")
gdpData
names(education)
eductiona[, "Income.Group"]
education[, "Income.Group"]
table(education)
table(education[, "Income.Group"])
GDP <- read.csv("./data/gdp.csv", skip = 4)
gdpData <- GDP[1:190,]
gpdData <- gdpData[, c(1,2,4,5)]
rm(gdpData)
gdpData <- gpdData
rm(gpdData)
colnames(gdpData) <- c("countryCode", "Rank", "Country", "totalDollar")
head(gdpData, n = 10)
str(gdpData)
GDP <- read.csv("./data/gdp.csv", skip = 4, StringsAsFactors = FALSE)
?read.csv
GDP <- read.csv("./data/gdp.csv", skip = 4, stringsAsFactors = FALSE)
gdpData <- GDP[1:190,]
gdpData <- gdpData[, c(1,2,4,5)]
colnames(gdpData) <- c("countryCode", "Rank", "Country", "totalDollar")
head(gdpData)
str(gdpData)
names(education)
intersect(names(gdpData), names(education))
names(gdpData)
mergeData <- merge(gdpData, education, by.x = "countryCode", by.y = "CountryCode", all = TRUE, suffixes = c(".gdp", ".edu"))
rank13 <- arrange(mergeData, desc(Rank))
rank13[13, "Short.Name"]
rank13
rank13[, c("Rank", "Short.Name")]
rank13 <- arrange(mergeData, desc(as.numeric(Rank))
)
rank13[13, "Short.Name"]
mergeData <- merge(gdpData, education, by.x = "countryCode", by.y = "CountryCode", all = FALSE, suffixes = c(".gdp", ".edu"))
rank13 <- arrange(mergeData, desc(as.numeric(Rank))
)
rank13[13, "Short.Name"]
str(mergeData)
mergeData$Rank <- as.numeric(mergeData$Rank)
str(mergeData)
meanGDPoecd <- aggregate(mergeData$Rank ~ mergeData$Income.Group, FUN = mean)
meanGDPoecd
mergeData2 <- mutate(mergeData, GDPgroups = cut2(Rank, g = 5))
table(mergeData2$GDPgroups, useNA = "ifany")
table(mergeData2$Income.Group, mergeData2$GDPgroups, useNA = "ifany")
190-38
survey <- read.csv("./data/survey.csv", stringsAsFactors = FALSE)
head(survey)
str(survey)
survey["ACR" == 3 & "AGS"== 6,]
agricultureLogical <- vector(survey["ACR" == 3 & "AGS" == 6,]
)
agricultureLogical <- as.vector(survey["ACR" == 3 & "AGS" == 6,])
survey[survey$ACR == 3,]
survey[survey$ACR == 3 & survey$AGS ==6,]
names(survey)
survey[survey$ACR == 3 & survey$AGS ==6, "SERIALNO"]
survey[(survey$ACR == 3 & survey$AGS ==6),]
agricultureLogical <- survey[any(survey$ACR == 3 & survey$AGS == 6),]
head(agricultureLogical)
agricultureLogical <- survey[all(survey$ACR == 3 & survey$AGS == 6),]
?any
agricultureLogical <- any((survey$ACR == 3 $ survey$AGS == 6))
agricultureLogical <- any((survey$ACR == 3 & survey$AGS == 6))
head(survey[which(agricultureLogical),], n = 3)
head(survey[which(agricultureLogical), "RT"], n = 3)
head(survey[which(agricultureLogical), "SERIALNO"], n = 3)
survey[which(agricultureLogical), "SERIALNO"]
head(agricultureLogical)
agricultureLogical <- all((survey$ACR == 3 & survey$AGS == 6))
agricultureLogical <- which((survey$ACR == 3 & survey$AGS == 6))
agricultureLogical <- ifelse((survey$ACR==3 & survey$AGS==6), TRUE, FALSE)
?which
?ifelse
survey[which(agricultureLogical),]
survey[which(agricultureLogical), "SERIALNO"]
survey[which(agricultureLogical), ]
head(survey[which(agricultureLogical), ], n = 3)
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
savehistory("~/datasciencecoursera/gettingCleaningData.Rhistory")
